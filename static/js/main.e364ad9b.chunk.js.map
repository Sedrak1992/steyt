{"version":3,"sources":["Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","item","id","deleteTodo","className","style","background","color","name","onClick","IconButton","randomColor","Math","floor","random","toString","App","useState","todos","setTodos","inputValue","setInputValue","i","currentItems","filter","index","map","width","margin","display","flexDirection","alignItems","event","concat","alert","textAlign","value","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAoBeA,MAjBf,YAAyC,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,WACxB,OACE,8BACE,sBAAKC,UAAU,OAAOC,MAAO,CAAEC,WAAYL,EAAKM,OAAhD,UACE,8BAAMN,EAAKO,OACX,8BACE,wBAAQC,QAAS,kBAAMN,EAAWD,IAAlC,mBAEF,8BACE,cAACQ,EAAA,EAAD,UACE,cAAC,IAAD,cCRNC,EAAc,4BAAUC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,MA4D3DC,MAzDf,WACE,MAA0BC,mBAAS,CACjC,CAAET,KAAM,IAAKD,MAAOI,KACpB,CAAEH,KAAM,IAAKD,MAAOI,KACpB,CAAEH,KAAM,IAAKD,MAAOI,OAHtB,mBAAOO,EAAP,KAAcC,EAAd,KAKA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMlB,EAAa,SAACmB,GAClBH,GAAS,SAACI,GAAD,OACPA,EAAaC,QAAO,SAACvB,EAAMwB,GAAP,OAAiBA,IAAUH,SAanD,OACE,sBAAKlB,UAAU,MAAf,UACE,qBAAKA,UAAU,OAAf,SACGc,EAAMQ,KAAI,SAACzB,EAAMqB,GAAP,OACT,cAAC,EAAD,CAAcrB,KAAMA,EAAMC,GAAIoB,EAAGnB,WAAYA,GAAlCmB,QAGf,sBACEjB,MAAO,CACLsB,MAAO,MACPC,OAAQ,YACRC,QAAS,OACTC,cAAe,SACfC,WAAY,UANhB,UASE,yBACEtB,QA1BQ,SAACuB,GACI,KAAfZ,GACFD,EAASD,EAAMe,OAAO,CAACzB,KAAMY,EAAab,MAAOI,OACjDU,EAAc,KAEda,MAAM,sBAsBF7B,MAAO,CAAE8B,UAAW,SAAUR,MAAO,QAFvC,UAIG,IAJH,SAKS,OAET,qBAAKtB,MAAO,CAAEuB,OAAQ,aAAtB,SACE,uBACEQ,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAAciB,EAAEC,OAAOH,mBC7CrCI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e364ad9b.chunk.js","sourcesContent":["import CreateIcon from \"@material-ui/icons/Create\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nfunction Todo({ item, id, deleteTodo }) {\n  return (\n    <div>\n      <div className=\"todo\" style={{ background: item.color }}>\n        <div>{item.name}</div>\n        <div>\n          <button onClick={() => deleteTodo(id)}> X </button>\n        </div>\n        <div>\n          <IconButton>\n            <CreateIcon />\n          </IconButton>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Todo;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"./css/Todo.css\";\nimport Todo from \"./Todo.js\";\n\nconst randomColor = () => `#${Math.floor(Math.random()*16777215).toString(16)}`;\n\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    { name: \"1\", color: randomColor() },\n    { name: \"2\", color: randomColor() },\n    { name: \"3\", color: randomColor() },\n  ]);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const deleteTodo = (i) => {\n    setTodos((currentItems) =>\n      currentItems.filter((item, index) => index !== i)\n    );\n  };\n\n  const addTodo = (event) => {\n    if (inputValue !== \"\") {\n      setTodos(todos.concat({name: inputValue , color: randomColor()}));\n      setInputValue(\"\");\n    } else {\n      alert(\"enter input value\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App1\">\n        {todos.map((item, i) => (\n          <Todo key={i} item={item} id={i} deleteTodo={deleteTodo} />\n        ))}\n      </div>\n      <div\n        style={{\n          width: \"40%\",\n          margin: \"30px auto\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <button\n          onClick={addTodo}\n          style={{ textAlign: \"center\", width: \"60px\" }}\n        >\n          {\" \"}\n          Add ++{\" \"}\n        </button>\n        <div style={{ margin: \"20px auto\" }}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}